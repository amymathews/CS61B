Q: Is one GrowList implementation always better than the others?
A: Yes definitely. After playing around with adding the elements, I observed that adding
elements actually made the JavaGrowList more efficient but made ArithGrowList worse.

Q: Why is the runtime for N insertions into a geometrically resizing list a Theta(N) operation?
A: We see everytime _size is equal to the length of the array we increase the size of
the array by double the size and then copy everything in. this will continue until the
array is finally full again. Therefore, the insertion is dependent on the new size of
the array.

Q: Why is the runtime for N insertions into an arithmetically resizing list a Theta(N^2) operation?
A: In the arithmetically resizing list, everytime _size is equal to the length of the array we increase
the size of the array by one then array is copied. Since it's increasing by one it is forced to look through
the entire array before begin able to add another element, therefore it is a Theta(N^2) operation as it runs N*N times.

Q: How does the runtime per operation for the ArithGrowList compare to that of GeomGrowList and JavaGrowList?
Specifically look at the non-accumulated plots and describe the trends for how long each operation takes as a
function of how many elements have already been inserted in the list.
A: ArithGrowList has the most runtime followed by JavaGrowList and GeomGrowList.
For ArithGrowList ↑ no of elements -> ↑ runtime increases -> ↑ no of spikes.
Not much change for JavaGrowList and GeomGrowList.

Q: When are there spikes in the per operation runtime graphs for each of the implementations?
 Does these make sense to you? Hint: some of these should and others might not.
 Empirical runtime can be quite messy and depends on machine specifics which will be
 revealed in other subsequent classes like CS61C.
A: Spikes indicates every time the size of the array is reassigned. This occurs more frequently for
ArithGrowList as we are increasing the size by one each time and reassigning more frequently.

Q: Optional: Try changing the code for GeomGrowList to resize by a different factor. How does this effect the theoretical asymptotic runtime? How does this effect the plotted runtime?
A:

Q: Optional: Try changing the code for ArithGrowList to resize by adding a different fixed number of spots in the array. How does this effect the theoretical asymptotic runtime? How does this effect the plotted runtime?
A: